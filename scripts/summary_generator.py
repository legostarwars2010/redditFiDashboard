import os
import openai
import pandas as pd
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    raise ValueError("GROQ_API_KEY is not set. Please add it to your .env file.")

# Groq-compatible OpenAI client
client = openai.OpenAI(
    api_key=GROQ_API_KEY,
    base_url="https://api.groq.com/openai/v1"
)

def summarize_with_groq(posts_df: pd.DataFrame, subreddit: str, max_posts: int = 20) -> str:
    """
    Summarize sentiment in a subreddit using Groq LLaMA3 (based on 'text' or 'title' column).

    Args:
        posts_df (pd.DataFrame): DataFrame with Reddit posts. Must include 'text' or 'title' column.
        subreddit (str): Subreddit name (for prompt context).
        max_posts (int): Max number of posts to include in prompt.

    Returns:
        str: Summary generated by LLaMA 3
    """
    if posts_df.empty:
        return "No posts available for this period."

    # Use 'text' column if present, fallback to 'title'
    if "text" not in posts_df.columns:
        if "title" in posts_df.columns:
            posts_df = posts_df.copy()
            posts_df["text"] = posts_df["title"]
        else:
            return "No usable post content found (no 'text' or 'title' column)."

    sample_texts = posts_df["text"].dropna().astype(str).head(max_posts)
    if sample_texts.empty:
        return "No post content to summarize."

    combined_text = "\n".join(sample_texts)

    prompt = (
        f"Summarize the sentiment in r/{subreddit} over the selected period. "
        f"Highlight key themes, tone, and any major opinions expressed.\n\n"
        f"Posts:\n{combined_text}"
    )

    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": "You are a financial sentiment analyst."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=200
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"Error generating summary: {str(e)}"
